#!/usr/bin/env python3
import os
import subprocess
import json
import psutil
import platform
import pwd
import signal
import time
import datetime
import asyncio
import logging
import re
import socket
import shutil
import glob
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode
import threading

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Carregar configura√ß√µes
try:
    with open('config.json', 'r') as f:
        CONFIG = json.load(f)
        TOKEN = CONFIG['token']
        DONO_USERNAME = CONFIG['dono_username'].lower()
        IDS_AUTORIZADOS = CONFIG['ids_autorizados']
except Exception as e:
    logger.error(f"Erro ao carregar configura√ß√µes: {e}")
    exit(1)

# Constantes
MENU_PRINCIPAL = "menu_principal"
MENU_SISTEMA = "menu_sistema"
MENU_USUARIOS = "menu_usuarios"
MENU_SERVICOS = "menu_servicos"
MENU_SEGURANCA = "menu_seguranca"
MENU_REDE = "menu_rede"
MENU_LOGS = "menu_logs"

# Constantes para alertas
LIMITE_CPU = 80  # Alerta quando CPU > 80%
LIMITE_RAM = 80  # Alerta quando RAM > 80%
LIMITE_DISCO = 85  # Alerta quando Disco > 85%
INTERVALO_MONITORAMENTO = 60  # Verificar a cada 60 segundos

# Cache para evitar consultas frequentes
cache = {
    "ultima_atualizacao": {},
    "dados": {}
}

# Cache para evitar alertas repetidos
alertas_enviados = {
    "cpu": False,
    "ram": False,
    "disco": False,
    "processos": set(),
    "usuarios": set()
}

async def verificar_autorizacao(update: Update) -> bool:
    """Verifica se o usu√°rio est√° autorizado"""
    user = update.effective_user
    if user.username and user.username.lower() == DONO_USERNAME or user.id in IDS_AUTORIZADOS:
        return True
    await update.message.reply_text(
        "üö´ *Acesso Negado*\n"
        "Voc√™ n√£o est√° autorizado a usar este bot\\.\n"
        "Entre em contato com o administrador\\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return False

async def executar_comando(comando: str, timeout: int = 30) -> str:
    """Executa um comando com timeout"""
    try:
        processo = await asyncio.create_subprocess_shell(
            comando,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        try:
            stdout, stderr = await asyncio.wait_for(
                processo.communicate(),
                timeout=timeout
            )
            
            if processo.returncode == 0:
                resultado = stdout.decode()
                return resultado if resultado.strip() else "‚úÖ Comando executado com sucesso"
            else:
                return f"‚ùå Erro:\n{stderr.decode()}"
        except asyncio.TimeoutError:
            processo.kill()
            return "‚ö†Ô∏è Comando excedeu o tempo limite"
            
    except Exception as e:
        return f"‚ùå Erro ao executar comando: {e}"

async def obter_status_sistema() -> str:
    """Obt√©m status detalhado do sistema"""
    try:
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_freq = psutil.cpu_freq()
        cpu_count = psutil.cpu_count()
        
        # Mem√≥ria
        mem = psutil.virtual_memory()
        swap = psutil.swap_memory()
        
        # Disco
        disk = psutil.disk_usage('/')
        
        # Uptime
        uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
        
        # Temperatura (se dispon√≠vel)
        temp = ""
        try:
            temps = psutil.sensors_temperatures()
            if temps:
                temp = f"\nüå°Ô∏è *Temperatura*:\n"
                for name, entries in temps.items():
                    for entry in entries:
                        temp += f"  ‚Ä¢ {entry.label or name}: {entry.current:.1f}¬∞C\n"
        except:
            pass
        
        # Formata a mensagem
        status = (
            "üñ•Ô∏è *Status do Sistema*\n\n"
            f"üìä *CPU*:\n"
            f"  ‚Ä¢ Uso: {cpu_percent}%\n"
            f"  ‚Ä¢ Frequ√™ncia: {cpu_freq.current:.1f} MHz\n"
            f"  ‚Ä¢ N√∫cleos: {cpu_count}\n\n"
            f"üß† *Mem√≥ria*:\n"
            f"  ‚Ä¢ RAM Total: {mem.total/1024/1024/1024:.1f} GB\n"
            f"  ‚Ä¢ RAM Usada: {mem.used/1024/1024/1024:.1f} GB ({mem.percent}%)\n"
            f"  ‚Ä¢ Swap Usada: {swap.used/1024/1024/1024:.1f} GB ({swap.percent}%)\n\n"
            f"üíæ *Disco*:\n"
            f"  ‚Ä¢ Total: {disk.total/1024/1024/1024:.1f} GB\n"
            f"  ‚Ä¢ Usado: {disk.used/1024/1024/1024:.1f} GB ({disk.percent}%)\n"
            f"  ‚Ä¢ Livre: {disk.free/1024/1024/1024:.1f} GB\n\n"
            f"‚è∞ *Uptime*: {uptime.days}d {uptime.seconds//3600}h {(uptime.seconds//60)%60}m"
            f"{temp}"
        )
        
        return status
    except Exception as e:
        return f"‚ùå Erro ao obter status: {e}"

async def obter_processos(limite: int = 10) -> str:
    """Obt√©m lista dos processos mais ativos"""
    try:
        processos = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'status', 'username']):
            try:
                pinfo = proc.info
                pinfo['cpu_percent'] = proc.cpu_percent()
                processos.append(pinfo)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        
        # Ordena por uso de CPU
        processos.sort(key=lambda x: x['cpu_percent'], reverse=True)
        
        texto = "üîÑ *Top Processos*\n\n"
        for proc in processos[:limite]:
            texto += (
                f"üìå *{proc['name'][:20]}*\n"
                f"  ‚Ä¢ PID: `{proc['pid']}`\n"
                f"  ‚Ä¢ CPU: {proc['cpu_percent']:.1f}%\n"
                f"  ‚Ä¢ RAM: {proc['memory_percent']:.1f}%\n"
                f"  ‚Ä¢ Status: {proc['status']}\n"
                f"  ‚Ä¢ Usu√°rio: {proc['username']}\n\n"
            )
        
        return texto
    except Exception as e:
        return f"‚ùå Erro ao listar processos: {e}"

async def obter_info_rede() -> str:
    """Obt√©m informa√ß√µes detalhadas da rede"""
    try:
        # Interfaces
        interfaces = psutil.net_if_stats()
        io_counters = psutil.net_io_counters(pernic=True)
        
        texto = "üåê *Informa√ß√µes de Rede*\n\n"
        
        # IP p√∫blico
        try:
            ip_publico = await executar_comando("curl -s ifconfig.me")
            texto += f"üåç *IP P√∫blico*: `{ip_publico.strip()}`\n\n"
        except:
            pass
        
        # Interfaces
        texto += "üì° *Interfaces*:\n\n"
        for nome, stats in interfaces.items():
            if nome != 'lo':  # Ignora loopback
                io = io_counters.get(nome, None)
                texto += (
                    f"*{nome}*:\n"
                    f"  ‚Ä¢ Status: {'üü¢ Ativo' if stats.isup else 'üî¥ Inativo'}\n"
                    f"  ‚Ä¢ Velocidade: {stats.speed} Mbps\n"
                )
                if io:
                    texto += (
                        f"  ‚Ä¢ Download: {io.bytes_recv/1024/1024:.1f} MB\n"
                        f"  ‚Ä¢ Upload: {io.bytes_sent/1024/1024:.1f} MB\n"
                    )
                texto += "\n"
        
        # Conex√µes ativas
        conns = psutil.net_connections()
        estabelecidas = len([c for c in conns if c.status == 'ESTABLISHED'])
        listening = len([c for c in conns if c.status == 'LISTEN'])
        
        texto += (
            "üîå *Conex√µes*:\n"
            f"  ‚Ä¢ Estabelecidas: {estabelecidas}\n"
            f"  ‚Ä¢ Escutando: {listening}\n"
        )
        
        return texto
    except Exception as e:
        return f"‚ùå Erro ao obter informa√ß√µes de rede: {e}"

async def obter_servicos() -> str:
    """Obt√©m status dos principais servi√ßos"""
    servicos = [
        "ssh", "apache2", "nginx", "mysql", "postgresql",
        "mongodb", "redis-server", "docker"
    ]
    
    texto = "üîß *Status dos Servi√ßos*\n\n"
    
    for servico in servicos:
        try:
            resultado = await executar_comando(f"systemctl is-active {servico}")
            status = "üü¢ Ativo" if "active" in resultado else "üî¥ Inativo"
            texto += f"‚Ä¢ *{servico}*: {status}\n"
        except:
            pass
    
    return texto

async def obter_usuarios_sistema() -> str:
    """Obt√©m informa√ß√µes sobre usu√°rios do sistema"""
    try:
        # Usu√°rios logados
        users = psutil.users()
        
        texto = "üë• *Usu√°rios do Sistema*\n\n"
        
        # Usu√°rios logados
        texto += "*Sess√µes Ativas*:\n"
        for user in users:
            texto += (
                f"‚Ä¢ *{user.name}*\n"
                f"  ‚Ä¢ Terminal: {user.terminal}\n"
                f"  ‚Ä¢ Host: {user.host}\n"
                f"  ‚Ä¢ Iniciado: {datetime.fromtimestamp(user.started).strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            )
        
        # √öltimos logins
        last_logins = await executar_comando("last -n 5")
        texto += f"\n*√öltimos Logins*:\n```\n{last_logins[:500]}```"
        
        return texto
    except Exception as e:
        return f"‚ùå Erro ao obter informa√ß√µes de usu√°rios: {e}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Menu principal"""
    if not await verificar_autorizacao(update):
        return
    
    # Cria o teclado inline
    keyboard = [
        [
            InlineKeyboardButton("üìä Sistema", callback_data=MENU_SISTEMA),
            InlineKeyboardButton("üë• Usu√°rios", callback_data=MENU_USUARIOS)
        ],
        [
            InlineKeyboardButton("üîß Servi√ßos", callback_data=MENU_SERVICOS),
            InlineKeyboardButton("üîí Seguran√ßa", callback_data=MENU_SEGURANCA)
        ],
        [
            InlineKeyboardButton("üåê Rede", callback_data=MENU_REDE),
            InlineKeyboardButton("üìù Logs", callback_data=MENU_LOGS)
        ]
    ]
    
    # Envia mensagem de boas-vindas
    await update.message.reply_text(
        f"üëã Ol√° {update.effective_user.first_name}\\!\n\n"
        "ü§ñ *BOT\\-T\\-Terminal*\n"
        "Controle total do seu servidor\\.\n\n"
        "Escolha uma op√ß√£o:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def cmd_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /cmd - Executa comandos"""
    if not await verificar_autorizacao(update):
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ÑπÔ∏è *Como usar*:\n"
            "`/cmd comando`\n\n"
            "*Exemplos*:\n"
            "‚Ä¢ `/cmd ls -la`\n"
            "‚Ä¢ `/cmd df -h`\n"
            "‚Ä¢ `/cmd free -m`\n"
            "‚Ä¢ `/cmd ps aux`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    comando = ' '.join(context.args)
    resultado = await executar_comando(comando)
    
    # Envia o resultado em partes se for muito grande
    if len(resultado) > 4000:
        partes = [resultado[i:i+4000] for i in range(0, len(resultado), 4000)]
        for parte in partes:
            await update.message.reply_text(
                f"```\n{parte}\n```",
                parse_mode=ParseMode.MARKDOWN_V2
            )
    else:
        await update.message.reply_text(
            f"```\n{resultado}\n```",
            parse_mode=ParseMode.MARKDOWN_V2
        )

def executar_speedtest():
    """Executa um teste de velocidade"""
    try:
        # Verifica se speedtest-cli est√° instalado
        try:
            import speedtest
        except ImportError:
            return "‚ùå Speedtest-cli n√£o est√° instalado. Instale com:\n`pip install speedtest-cli`"
        
        # Executa o teste
        s = speedtest.Speedtest()
        s.get_best_server()
        s.download()
        s.upload()
        
        # Formata o resultado
        resultado = s.results.dict()
        
        # Formata a mensagem
        download = resultado["download"] / 1_000_000  # Mbps
        upload = resultado["upload"] / 1_000_000  # Mbps
        ping = resultado["ping"]
        servidor = resultado["server"]["sponsor"]
        cidade = resultado["server"]["name"]
        
        texto = (
            "üöÄ *Resultado do Speed Test*\n\n"
            f"‚¨áÔ∏è *Download*: `{download:.2f} Mbps`\n"
            f"‚¨ÜÔ∏è *Upload*: `{upload:.2f} Mbps`\n"
            f"üîÑ *Ping*: `{ping:.0f} ms`\n"
            f"üåê *Servidor*: `{servidor} ({cidade})`\n"
        )
        
        return texto
    except Exception as e:
        return f"‚ùå Erro ao executar speedtest: {e}"

# Fun√ß√£o para monitoramento em background usando threads
def monitorar_sistema_thread(app: Application):
    """Fun√ß√£o que roda em uma thread separada para monitorar o sistema"""
    logger.info("Iniciando monitoramento do sistema em thread separada")
    
    def enviar_alerta_sync(mensagem: str):
        """Vers√£o s√≠ncrona da fun√ß√£o de enviar alerta"""
        try:
            if IDS_AUTORIZADOS:
                app.bot.send_message(
                    chat_id=IDS_AUTORIZADOS[0],
                    text=mensagem,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        except Exception as e:
            logger.error(f"Erro ao enviar alerta: {e}")
    
    while True:
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            if cpu_percent > LIMITE_CPU and not alertas_enviados["cpu"]:
                enviar_alerta_sync(f"‚ö†Ô∏è *Alerta de CPU*\n\nUso de CPU est√° em {cpu_percent}%!")
                alertas_enviados["cpu"] = True
            elif cpu_percent < LIMITE_CPU:
                alertas_enviados["cpu"] = False
            
            # Mem√≥ria
            mem = psutil.virtual_memory()
            if mem.percent > LIMITE_RAM and not alertas_enviados["ram"]:
                enviar_alerta_sync(f"‚ö†Ô∏è *Alerta de RAM*\n\nUso de RAM est√° em {mem.percent}%!")
                alertas_enviados["ram"] = True
            elif mem.percent < LIMITE_RAM:
                alertas_enviados["ram"] = False
            
            # Disco
            disk = psutil.disk_usage('/')
            if disk.percent > LIMITE_DISCO and not alertas_enviados["disco"]:
                enviar_alerta_sync(f"‚ö†Ô∏è *Alerta de Disco*\n\nUso de disco est√° em {disk.percent}%!")
                alertas_enviados["disco"] = True
            elif disk.percent < LIMITE_DISCO:
                alertas_enviados["disco"] = False
            
            # Processos consumindo muita RAM/CPU
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    pinfo = proc.info
                    if pinfo['cpu_percent'] > 50 or pinfo['memory_percent'] > 50:
                        proc_id = f"{pinfo['pid']}-{pinfo['name']}"
                        if proc_id not in alertas_enviados["processos"]:
                            enviar_alerta_sync(
                                f"‚ö†Ô∏è *Processo com Alto Consumo*\n\n"
                                f"Processo: {pinfo['name']}\n"
                                f"PID: {pinfo['pid']}\n"
                                f"CPU: {pinfo['cpu_percent']}%\n"
                                f"RAM: {pinfo['memory_percent']:.1f}%"
                            )
                            alertas_enviados["processos"].add(proc_id)
                except:
                    pass
            
            # Novos usu√°rios conectados
            users = psutil.users()
            for user in users:
                user_id = f"{user.name}-{user.host}-{user.started}"
                if user_id not in alertas_enviados["usuarios"]:
                    # Obt√©m localiza√ß√£o do IP
                    try:
                        import requests
                        response = requests.get(f"https://ipinfo.io/{user.host}/json")
                        ip_data = response.json()
                        localizacao = f"{ip_data.get('city', 'N/A')}, {ip_data.get('region', 'N/A')}, {ip_data.get('country', 'N/A')}"
                    except:
                        localizacao = "N√£o dispon√≠vel"
                    
                    enviar_alerta_sync(
                        f"üë§ *Novo Usu√°rio Conectado*\n\n"
                        f"Usu√°rio: {user.name}\n"
                        f"IP: {user.host}\n"
                        f"Localiza√ß√£o: {localizacao}\n"
                        f"Terminal: {user.terminal}\n"
                        f"Hora: {datetime.fromtimestamp(user.started).strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                    alertas_enviados["usuarios"].add(user_id)
            
            time.sleep(INTERVALO_MONITORAMENTO)
            
        except Exception as e:
            logger.error(f"Erro no monitoramento: {e}")
            time.sleep(INTERVALO_MONITORAMENTO)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para bot√µes inline"""
    if not await verificar_autorizacao(update):
        return
    
    query = update.callback_query
    await query.answer()
    
    if query.data == MENU_SISTEMA:
        keyboard = [
            [
                InlineKeyboardButton("üìä Status", callback_data="status"),
                InlineKeyboardButton("üîÑ Processos", callback_data="processos")
            ],
            [
                InlineKeyboardButton("üíæ Disco", callback_data="disco"),
                InlineKeyboardButton("üß† Mem√≥ria", callback_data="memoria")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            "üíª *Menu Sistema*\n"
            "Escolha uma op√ß√£o:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_USUARIOS:
        keyboard = [
            [
                InlineKeyboardButton("üë• Listar Usu√°rios", callback_data="usuarios_listar"),
                InlineKeyboardButton("üîë Gerenciar SSH", callback_data="usuarios_ssh")
            ],
            [
                InlineKeyboardButton("‚ûï Adicionar", callback_data="usuarios_add"),
                InlineKeyboardButton("‚ûñ Remover", callback_data="usuarios_del")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            "üë• *Menu Usu√°rios*\n"
            "Escolha uma op√ß√£o:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_SERVICOS:
        keyboard = [
            [
                InlineKeyboardButton("üìä Status", callback_data="servicos_status"),
                InlineKeyboardButton("üîÑ Reiniciar", callback_data="servicos_restart")
            ],
            [
                InlineKeyboardButton("‚ñ∂Ô∏è Iniciar", callback_data="servicos_start"),
                InlineKeyboardButton("‚èπÔ∏è Parar", callback_data="servicos_stop")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            "üîß *Menu Servi√ßos*\n"
            "Escolha uma op√ß√£o:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_SEGURANCA:
        keyboard = [
            [
                InlineKeyboardButton("üîí Firewall", callback_data="seguranca_firewall"),
                InlineKeyboardButton("üõ°Ô∏è Fail2Ban", callback_data="seguranca_fail2ban")
            ],
            [
                InlineKeyboardButton("üîç Scan", callback_data="seguranca_scan"),
                InlineKeyboardButton("üìù Logs", callback_data="seguranca_logs")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            "üîí *Menu Seguran√ßa*\n"
            "Escolha uma op√ß√£o:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_REDE:
        keyboard = [
            [
                InlineKeyboardButton("üìä Status", callback_data="rede_status"),
                InlineKeyboardButton("üîå Conex√µes", callback_data="rede_conexoes")
            ],
            [
                InlineKeyboardButton("üì° Interfaces", callback_data="rede_interfaces"),
                InlineKeyboardButton("üöÄ Speed Test", callback_data="rede_speedtest")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            "üåê *Menu Rede*\n"
            "Escolha uma op√ß√£o:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_LOGS:
        keyboard = [
            [
                InlineKeyboardButton("üìù Sistema", callback_data="logs_sistema"),
                InlineKeyboardButton("üîí Seguran√ßa", callback_data="logs_seguranca")
            ],
            [
                InlineKeyboardButton("üåê Apache/Nginx", callback_data="logs_web"),
                InlineKeyboardButton("üìä Aplica√ß√£o", callback_data="logs_app")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            "üìù *Menu Logs*\n"
            "Escolha uma op√ß√£o:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "status":
        status = await obter_status_sistema()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_SISTEMA)]]
        await query.edit_message_text(
            status,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "processos":
        processos = await obter_processos()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_SISTEMA)]]
        await query.edit_message_text(
            processos,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "rede_status":
        info_rede = await obter_info_rede()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_REDE)]]
        await query.edit_message_text(
            info_rede,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "servicos_status":
        servicos = await obter_servicos()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_SERVICOS)]]
        await query.edit_message_text(
            servicos,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "usuarios_listar":
        usuarios = await obter_usuarios_sistema()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_USUARIOS)]]
        await query.edit_message_text(
            usuarios,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_PRINCIPAL:
        await start(update, context)
    
    elif query.data == "rede_speedtest":
        await query.edit_message_text(
            "üöÄ *Speed Test*\n\n"
            "‚è≥ Iniciando teste de velocidade...\n"
            "Isso pode levar alguns segundos.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # Executa o teste
        resultado = executar_speedtest()
        
        # Mostra o resultado
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_REDE)]]
        await query.edit_message_text(
            resultado,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Trata erros do bot"""
    logger.error(f"Erro: {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå *Erro*\n"
                "Ocorreu um erro ao processar seu comando\\.\n"
                "O erro foi registrado e ser√° analisado\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except:
        pass

def main():
    """Fun√ß√£o principal"""
    try:
        # Criar aplica√ß√£o
        app = Application.builder().token(TOKEN).build()
        
        # Adicionar handlers
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("cmd", cmd_handler))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_error_handler(error_handler)
        
        # Iniciar thread de monitoramento
        monitoring_thread = threading.Thread(target=monitorar_sistema_thread, args=(app,), daemon=True)
        monitoring_thread.start()
        
        # Iniciar bot
        logger.info("üöÄ Bot iniciado!")
        app.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"Erro fatal: {e}")
        exit(1)

if __name__ == "__main__":
    main()