#!/usr/bin/env python3
import os
import subprocess
import json
import psutil
import platform
import pwd
import signal
import time
import datetime
import asyncio
import logging
import re
import socket
import shutil
import glob
import threading
import requests
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Carregar configura√ß√µes
try:
    with open('config.json', 'r') as f:
        CONFIG = json.load(f)
        TOKEN = CONFIG['token']
        DONO_USERNAME = CONFIG['dono_username'].lower()
        IDS_AUTORIZADOS = CONFIG['ids_autorizados']
except Exception as e:
    logger.error(f"Erro ao carregar configura√ß√µes: {e}")
    exit(1)

# Constantes
MENU_PRINCIPAL = "menu_principal"
MENU_SISTEMA = "menu_sistema"
MENU_USUARIOS = "menu_usuarios"
MENU_SERVICOS = "menu_servicos"
MENU_SEGURANCA = "menu_seguranca"
MENU_REDE = "menu_rede"
MENU_LOGS = "menu_logs"

# Constantes para alertas
LIMITE_CPU = 80
LIMITE_RAM = 80
LIMITE_DISCO = 85
INTERVALO_MONITORAMENTO = 60

# Cache para evitar alertas repetidos
alertas_enviados = {
    "cpu": False,
    "ram": False,
    "disco": False,
    "processos": set(),
    "usuarios": set()
}

def escape_markdown(text: str) -> str:
    """Escapa caracteres especiais para Markdown V2"""
    if not isinstance(text, str):
        return str(text)
    chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in chars:
        text = text.replace(char, f"\\{char}")
    return text

async def verificar_autorizacao(update: Update) -> bool:
    """Verifica se o usu√°rio est√° autorizado"""
    user = update.effective_user
    if user.username and user.username.lower() == DONO_USERNAME or user.id in IDS_AUTORIZADOS:
        return True
    await update.message.reply_text(
        escape_markdown("üö´ *Acesso Negado*\nVoc√™ n√£o est√° autorizado a usar este bot.\nEntre em contato com o administrador."),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return False

async def executar_comando(comando: str, timeout: int = 30) -> str:
    """Executa um comando com timeout"""
    try:
        processo = await asyncio.create_subprocess_shell(
            comando,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        try:
            stdout, stderr = await asyncio.wait_for(
                processo.communicate(),
                timeout=timeout
            )
            
            if processo.returncode == 0:
                resultado = stdout.decode('utf-8', errors='replace')
                return resultado if resultado.strip() else "‚úÖ Comando executado com sucesso"
            else:
                return f"‚ùå Erro:\n{stderr.decode('utf-8', errors='replace')}"
        except asyncio.TimeoutError:
            try:
                processo.kill()
            except:
                pass
            return "‚ö†Ô∏è Comando excedeu o tempo limite"
            
    except Exception as e:
        return f"‚ùå Erro ao executar comando: {e}"

async def obter_status_sistema() -> str:
    """Obt√©m status detalhado do sistema"""
    try:
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_freq = psutil.cpu_freq()
        cpu_count = psutil.cpu_count()
        mem = psutil.virtual_memory()
        swap = psutil.swap_memory()
        disk = psutil.disk_usage('/')
        uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
        
        status = (
            "üñ•Ô∏è *Status do Sistema*\n\n"
            f"üìä *CPU*:\n"
            f"  ‚Ä¢ Uso: {cpu_percent}%\n"
            f"  ‚Ä¢ Frequ√™ncia: {cpu_freq.current:.1f} MHz\n"
            f"  ‚Ä¢ N√∫cleos: {cpu_count}\n\n"
            f"üß† *Mem√≥ria*:\n"
            f"  ‚Ä¢ RAM Total: {mem.total/1024/1024/1024:.1f} GB\n"
            f"  ‚Ä¢ RAM Usada: {mem.used/1024/1024/1024:.1f} GB ({mem.percent}%)\n"
            f"  ‚Ä¢ Swap Usada: {swap.used/1024/1024/1024:.1f} GB ({swap.percent}%)\n\n"
            f"üíæ *Disco*:\n"
            f"  ‚Ä¢ Total: {disk.total/1024/1024/1024:.1f} GB\n"
            f"  ‚Ä¢ Usado: {disk.used/1024/1024/1024:.1f} GB ({disk.percent}%)\n"
            f"  ‚Ä¢ Livre: {disk.free/1024/1024/1024:.1f} GB\n\n"
            f"‚è∞ *Uptime*: {uptime.days}d {uptime.seconds//3600}h {(uptime.seconds//60)%60}m"
        )
        
        return escape_markdown(status)
    except Exception as e:
        return escape_markdown(f"‚ùå Erro ao obter status: {e}")

async def obter_processos(limite: int = 10) -> str:
    """Obt√©m lista dos processos mais ativos"""
    try:
        processos = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'status', 'username']):
            try:
                pinfo = proc.info
                pinfo['cpu_percent'] = proc.cpu_percent()
                processos.append(pinfo)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        
        processos.sort(key=lambda x: x['cpu_percent'], reverse=True)
        
        texto = "üîÑ *Top Processos*\n\n"
        for proc in processos[:limite]:
            texto += (
                f"üìå *{proc['name'][:20]}*\n"
                f"  ‚Ä¢ PID: `{proc['pid']}`\n"
                f"  ‚Ä¢ CPU: {proc['cpu_percent']:.1f}%\n"
                f"  ‚Ä¢ RAM: {proc['memory_percent']:.1f}%\n"
                f"  ‚Ä¢ Status: {proc['status']}\n"
                f"  ‚Ä¢ Usu√°rio: {proc['username']}\n\n"
            )
        
        return escape_markdown(texto)
    except Exception as e:
        return escape_markdown(f"‚ùå Erro ao listar processos: {e}")

async def obter_info_rede() -> str:
    """Obt√©m informa√ß√µes detalhadas da rede"""
    try:
        interfaces = psutil.net_if_stats()
        io_counters = psutil.net_io_counters(pernic=True)
        
        texto = "üåê *Informa√ß√µes de Rede*\n\n"
        
        try:
            response = requests.get('https://api.ipify.org?format=json')
            ip_publico = response.json()['ip']
            texto += f"üåç *IP P√∫blico*: `{ip_publico}`\n\n"
        except:
            pass
        
        texto += "üì° *Interfaces*:\n\n"
        for nome, stats in interfaces.items():
            if nome != 'lo':
                io = io_counters.get(nome, None)
                texto += (
                    f"*{nome}*:\n"
                    f"  ‚Ä¢ Status: {'üü¢ Ativo' if stats.isup else 'üî¥ Inativo'}\n"
                    f"  ‚Ä¢ Velocidade: {stats.speed} Mbps\n"
                )
                if io:
                    texto += (
                        f"  ‚Ä¢ Download: {io.bytes_recv/1024/1024:.1f} MB\n"
                        f"  ‚Ä¢ Upload: {io.bytes_sent/1024/1024:.1f} MB\n"
                    )
                texto += "\n"
        
        conns = psutil.net_connections()
        estabelecidas = len([c for c in conns if c.status == 'ESTABLISHED'])
        listening = len([c for c in conns if c.status == 'LISTEN'])
        
        texto += (
            "üîå *Conex√µes*:\n"
            f"  ‚Ä¢ Estabelecidas: {estabelecidas}\n"
            f"  ‚Ä¢ Escutando: {listening}\n"
        )
        
        return escape_markdown(texto)
    except Exception as e:
        return escape_markdown(f"‚ùå Erro ao obter informa√ß√µes de rede: {e}")

def executar_speedtest() -> str:
    """Executa um teste de velocidade"""
    try:
        import speedtest
        s = speedtest.Speedtest()
        s.get_best_server()
        s.download()
        s.upload()
        
        resultado = s.results.dict()
        download = resultado["download"] / 1_000_000
        upload = resultado["upload"] / 1_000_000
        ping = resultado["ping"]
        servidor = resultado["server"]["sponsor"]
        cidade = resultado["server"]["name"]
        
        texto = (
            "üöÄ *Resultado do Speed Test*\n\n"
            f"‚¨áÔ∏è *Download*: `{download:.2f} Mbps`\n"
            f"‚¨ÜÔ∏è *Upload*: `{upload:.2f} Mbps`\n"
            f"üîÑ *Ping*: `{ping:.0f} ms`\n"
            f"üåê *Servidor*: `{servidor} ({cidade})`\n"
        )
        
        return escape_markdown(texto)
    except Exception as e:
        return escape_markdown(f"‚ùå Erro ao executar speedtest: {e}")

def monitorar_sistema_thread(app: Application):
    """Fun√ß√£o que roda em uma thread separada para monitorar o sistema"""
    logger.info("Iniciando monitoramento do sistema em thread separada")
    
    def enviar_alerta_sync(mensagem: str):
        """Vers√£o s√≠ncrona da fun√ß√£o de enviar alerta"""
        try:
            if IDS_AUTORIZADOS:
                app.bot.send_message(
                    chat_id=IDS_AUTORIZADOS[0],
                    text=escape_markdown(mensagem),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        except Exception as e:
            logger.error(f"Erro ao enviar alerta: {e}")
    
    while True:
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            if cpu_percent > LIMITE_CPU and not alertas_enviados["cpu"]:
                enviar_alerta_sync(f"‚ö†Ô∏è *Alerta de CPU*\n\nUso de CPU est√° em {cpu_percent}%!")
                alertas_enviados["cpu"] = True
            elif cpu_percent < LIMITE_CPU:
                alertas_enviados["cpu"] = False
            
            mem = psutil.virtual_memory()
            if mem.percent > LIMITE_RAM and not alertas_enviados["ram"]:
                enviar_alerta_sync(f"‚ö†Ô∏è *Alerta de RAM*\n\nUso de RAM est√° em {mem.percent}%!")
                alertas_enviados["ram"] = True
            elif mem.percent < LIMITE_RAM:
                alertas_enviados["ram"] = False
            
            disk = psutil.disk_usage('/')
            if disk.percent > LIMITE_DISCO and not alertas_enviados["disco"]:
                enviar_alerta_sync(f"‚ö†Ô∏è *Alerta de Disco*\n\nUso de disco est√° em {disk.percent}%!")
                alertas_enviados["disco"] = True
            elif disk.percent < LIMITE_DISCO:
                alertas_enviados["disco"] = False
            
            time.sleep(INTERVALO_MONITORAMENTO)
            
        except Exception as e:
            logger.error(f"Erro no monitoramento: {e}")
            time.sleep(INTERVALO_MONITORAMENTO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Menu principal"""
    if not await verificar_autorizacao(update):
        return
    
    keyboard = [
        [
            InlineKeyboardButton("üíª Sistema", callback_data=MENU_SISTEMA),
            InlineKeyboardButton("üë• Usu√°rios", callback_data=MENU_USUARIOS)
        ],
        [
            InlineKeyboardButton("üîß Servi√ßos", callback_data=MENU_SERVICOS),
            InlineKeyboardButton("üîí Seguran√ßa", callback_data=MENU_SEGURANCA)
        ],
        [
            InlineKeyboardButton("üåê Rede", callback_data=MENU_REDE),
            InlineKeyboardButton("üìù Logs", callback_data=MENU_LOGS)
        ]
    ]
    
    welcome_msg = escape_markdown(
        "ü§ñ *Bem-vindo ao BOT-T-Terminal*\n\n"
        "Controle e monitore seu servidor atrav√©s deste bot.\n"
        "Escolha uma op√ß√£o abaixo:"
    )
    
    await update.message.reply_text(
        welcome_msg,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para bot√µes inline"""
    if not await verificar_autorizacao(update):
        return
    
    query = update.callback_query
    await query.answer()
    
    if query.data == MENU_SISTEMA:
        keyboard = [
            [
                InlineKeyboardButton("üìä Status", callback_data="status"),
                InlineKeyboardButton("üîÑ Processos", callback_data="processos")
            ],
            [
                InlineKeyboardButton("üíæ Disco", callback_data="disco"),
                InlineKeyboardButton("üß† Mem√≥ria", callback_data="memoria")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            escape_markdown("üíª *Menu Sistema*\nEscolha uma op√ß√£o:"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_USUARIOS:
        keyboard = [
            [
                InlineKeyboardButton("üë• Listar", callback_data="usuarios_listar"),
                InlineKeyboardButton("üîë SSH", callback_data="usuarios_ssh")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            escape_markdown("üë• *Menu Usu√°rios*\nEscolha uma op√ß√£o:"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_SERVICOS:
        keyboard = [
            [
                InlineKeyboardButton("üìä Status", callback_data="servicos_status"),
                InlineKeyboardButton("üîÑ Reiniciar", callback_data="servicos_restart")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            escape_markdown("üîß *Menu Servi√ßos*\nEscolha uma op√ß√£o:"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_SEGURANCA:
        keyboard = [
            [
                InlineKeyboardButton("üîí Firewall", callback_data="seguranca_firewall"),
                InlineKeyboardButton("üõ°Ô∏è Fail2Ban", callback_data="seguranca_fail2ban")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            escape_markdown("üîí *Menu Seguran√ßa*\nEscolha uma op√ß√£o:"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_REDE:
        keyboard = [
            [
                InlineKeyboardButton("üìä Status", callback_data="rede_status"),
                InlineKeyboardButton("üöÄ Speed Test", callback_data="rede_speedtest")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            escape_markdown("üåê *Menu Rede*\nEscolha uma op√ß√£o:"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_LOGS:
        keyboard = [
            [
                InlineKeyboardButton("üñ•Ô∏è Sistema", callback_data="logs_sistema"),
                InlineKeyboardButton("üîí Seguran√ßa", callback_data="logs_seguranca")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_PRINCIPAL)
            ]
        ]
        await query.edit_message_text(
            escape_markdown("üìù *Menu Logs*\nEscolha uma op√ß√£o:"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == MENU_PRINCIPAL:
        keyboard = [
            [
                InlineKeyboardButton("üíª Sistema", callback_data=MENU_SISTEMA),
                InlineKeyboardButton("üë• Usu√°rios", callback_data=MENU_USUARIOS)
            ],
            [
                InlineKeyboardButton("üîß Servi√ßos", callback_data=MENU_SERVICOS),
                InlineKeyboardButton("üîí Seguran√ßa", callback_data=MENU_SEGURANCA)
            ],
            [
                InlineKeyboardButton("üåê Rede", callback_data=MENU_REDE),
                InlineKeyboardButton("üìù Logs", callback_data=MENU_LOGS)
            ]
        ]
        await query.edit_message_text(
            escape_markdown("ü§ñ *Menu Principal*\nEscolha uma op√ß√£o:"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "status":
        status_texto = await obter_status_sistema()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_SISTEMA)]]
        await query.edit_message_text(
            status_texto,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "processos":
        processos_texto = await obter_processos()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_SISTEMA)]]
        await query.edit_message_text(
            processos_texto,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "rede_status":
        rede_texto = await obter_info_rede()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_REDE)]]
        await query.edit_message_text(
            rede_texto,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    elif query.data == "rede_speedtest":
        await query.edit_message_text(
            escape_markdown("üöÄ *Speed Test*\n\n‚è≥ Iniciando teste de velocidade...\nIsso pode levar alguns segundos."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        resultado = executar_speedtest()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=MENU_REDE)]]
        await query.edit_message_text(
            resultado,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Trata erros do bot"""
    logger.error(f"Erro: {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                escape_markdown("‚ùå *Erro*\nOcorreu um erro ao processar seu comando.\nO erro foi registrado e ser√° analisado."),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except:
        pass

def main():
    """Fun√ß√£o principal"""
    try:
        app = Application.builder().token(TOKEN).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_error_handler(error_handler)
        
        monitoring_thread = threading.Thread(target=monitorar_sistema_thread, args=(app,), daemon=True)
        monitoring_thread.start()
        
        logger.info("üöÄ Bot iniciado!")
        app.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"Erro fatal: {e}")
        exit(1)

if __name__ == "__main__":
    main()