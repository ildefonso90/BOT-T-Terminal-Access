#!/usr/bin/env python3
import os
import subprocess
import json
import psutil
import platform
import pwd
import signal
from datetime import datetime
from typing import List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

def verificar_root():
    """Verifica se o script est√° sendo executado como root"""
    if os.geteuid() != 0:
        print("‚ùå Este bot precisa ser executado como root!")
        exit(1)

# Verificar privil√©gios root
verificar_root()

# Carregar configura√ß√µes
try:
    with open('config.json', 'r') as f:
        config = json.load(f)
        TOKEN = config['token']
        DONO_USERNAME = config['dono_username'].lower()
        IDS_AUTORIZADOS = config['ids_autorizados']
        USUARIOS_BLOQUEADOS = config.get('usuarios_bloqueados', [])
        TENTATIVAS_MAXIMAS = config.get('tentativas_maximas', 3)
except Exception as e:
    print(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
    print("‚ö†Ô∏è Execute o script de instala√ß√£o (install.py) primeiro!")
    exit(1)

# Mapa para armazenar tentativas de acesso
tentativas_falhas = {}

def salvar_configuracoes():
    """Salva as configura√ß√µes atualizadas no arquivo"""
    try:
        with open('config.json', 'w') as f:
            json.dump({
                'token': TOKEN,
                'dono_username': DONO_USERNAME,
                'ids_autorizados': IDS_AUTORIZADOS,
                'usuarios_bloqueados': USUARIOS_BLOQUEADOS,
                'tentativas_maximas': TENTATIVAS_MAXIMAS
            }, f, indent=4)
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√µes: {e}")
        return False

def verificar_autorizacao(user_id: int, username: str = None) -> bool:
    """Verifica se o usu√°rio est√° autorizado"""
    # Verificar se est√° bloqueado
    if user_id in USUARIOS_BLOQUEADOS:
        return False
    
    # Verificar se √© o dono
    if username and username.lower() == DONO_USERNAME:
        return True
    
    # Verificar se est√° autorizado
    return user_id in IDS_AUTORIZADOS

def registrar_tentativa_falha(user_id: int):
    """Registra uma tentativa falha de acesso"""
    if user_id not in tentativas_falhas:
        tentativas_falhas[user_id] = 1
    else:
        tentativas_falhas[user_id] += 1
    
    # Bloquear ap√≥s exceder tentativas
    if tentativas_falhas[user_id] >= TENTATIVAS_MAXIMAS:
        if user_id not in USUARIOS_BLOQUEADOS:
            USUARIOS_BLOQUEADOS.append(user_id)
            salvar_configuracoes()

def executar_comando(comando: str) -> tuple:
    """Executa um comando e retorna (sucesso, sa√≠da)"""
    try:
        processo = subprocess.Popen(
            comando,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        try:
            stdout, stderr = processo.communicate(timeout=30)
            sucesso = processo.returncode == 0
            saida = stdout if sucesso else stderr
            return sucesso, saida.strip()
        except subprocess.TimeoutExpired:
            processo.kill()
            return False, "‚ö†Ô∏è Comando excedeu o tempo limite de 30 segundos"
            
    except Exception as e:
        return False, f"‚ùå Erro ao executar comando: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Mostra menu principal"""
    user = update.effective_user
    user_id = user.id
    username = user.username

    if not username:
        await update.message.reply_text(
            "‚ùå Voc√™ precisa ter um username configurado no Telegram para usar este bot."
        )
        return

    # Verificar autoriza√ß√£o
    if not verificar_autorizacao(user_id, username):
        registrar_tentativa_falha(user_id)
        
        if user_id in USUARIOS_BLOQUEADOS:
            await update.message.reply_text(
                "üö´ Voc√™ est√° bloqueado! Entre em contato com o administrador."
            )
        else:
            tentativas = tentativas_falhas.get(user_id, 0)
            await update.message.reply_text(
                f"‚ùå Acesso n√£o autorizado!\n"
                f"Tentativas restantes: {TENTATIVAS_MAXIMAS - tentativas}"
            )
        return

    # Obter informa√ß√µes do sistema
    try:
        cpu_percent = psutil.cpu_percent(interval=1)
        mem = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        status = f"""
ü§ñ *BOT-T-Terminal*

*Sistema:*
‚Ä¢ OS: {platform.system()} {platform.release()}
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {mem.percent}%
‚Ä¢ Disco: {disk.percent}%
‚Ä¢ Uptime: {datetime.now() - datetime.fromtimestamp(psutil.boot_time())}

*Usu√°rio:*
‚Ä¢ Nome: {user.first_name}
‚Ä¢ Username: @{username}
‚Ä¢ ID: `{user_id}`
‚Ä¢ Tipo: {"üëë Dono" if username.lower() == DONO_USERNAME else "üë§ Autorizado"}

*Comandos:*
/cmd - Executar comando
/status - Ver status detalhado
/processos - Listar processos
/memoria - Ver uso de mem√≥ria
/disco - Ver uso do disco
/rede - Ver informa√ß√µes de rede
/ajuda - Mostrar ajuda

‚ö†Ô∏è Este bot tem acesso root ao servidor.
Use com responsabilidade!
"""
        
        # Bot√µes inline
        keyboard = [
            [
                InlineKeyboardButton("üìä Status", callback_data="status"),
                InlineKeyboardButton("üíæ Mem√≥ria", callback_data="memoria")
            ],
            [
                InlineKeyboardButton("üíΩ Disco", callback_data="disco"),
                InlineKeyboardButton("üåê Rede", callback_data="rede")
            ],
            [
                InlineKeyboardButton("üìã Processos", callback_data="processos"),
                InlineKeyboardButton("‚ùì Ajuda", callback_data="ajuda")
            ]
        ]
        
        await update.message.reply_text(
            status,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao obter status: {e}")

async def cmd_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Executa comandos enviados via /cmd"""
    user = update.effective_user
    
    if not verificar_autorizacao(user.id, user.username):
        await update.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
    
    # Obter comando ap√≥s /cmd
    comando = update.message.text.split(' ', 1)
    if len(comando) < 2:
        await update.message.reply_text("‚ö†Ô∏è Use: /cmd <comando>")
        return
        
    comando = comando[1]
    
    # Executar comando
    sucesso, saida = executar_comando(comando)
    
    if not saida:
        saida = "‚úÖ Comando executado (sem sa√≠da)"
    
    # Formatar resposta
    resposta = f"‚úÖ Resultado:" if sucesso else "‚ùå Erro:"
    resposta += f"\n```\n{saida[:3900]}\n```"  # Limite Telegram
    
    await update.message.reply_text(
        resposta,
        parse_mode='Markdown'
    )

async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra status detalhado do sistema"""
    if not verificar_autorizacao(update.effective_user.id):
        await update.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
        
    try:
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_freq = psutil.cpu_freq()
        cpu_count = psutil.cpu_count()
        
        # Mem√≥ria
        mem = psutil.virtual_memory()
        swap = psutil.swap_memory()
        
        # Disco
        disk = psutil.disk_usage('/')
        
        # Sistema
        boot_time = datetime.fromtimestamp(psutil.boot_time())
        uptime = datetime.now() - boot_time
        
        status = f"""
üìä *Status do Sistema*

*CPU:*
‚Ä¢ Uso: {cpu_percent}%
‚Ä¢ Cores: {cpu_count}
‚Ä¢ Freq: {cpu_freq.current:.1f} MHz
‚Ä¢ Min: {cpu_freq.min:.1f} MHz
‚Ä¢ Max: {cpu_freq.max:.1f} MHz

*Mem√≥ria RAM:*
‚Ä¢ Total: {mem.total / (1024**3):.1f} GB
‚Ä¢ Usada: {mem.used / (1024**3):.1f} GB
‚Ä¢ Livre: {mem.free / (1024**3):.1f} GB
‚Ä¢ Uso: {mem.percent}%

*Swap:*
‚Ä¢ Total: {swap.total / (1024**3):.1f} GB
‚Ä¢ Usada: {swap.used / (1024**3):.1f} GB
‚Ä¢ Livre: {swap.free / (1024**3):.1f} GB
‚Ä¢ Uso: {swap.percent}%

*Disco:*
‚Ä¢ Total: {disk.total / (1024**3):.1f} GB
‚Ä¢ Usado: {disk.used / (1024**3):.1f} GB
‚Ä¢ Livre: {disk.free / (1024**3):.1f} GB
‚Ä¢ Uso: {disk.percent}%

*Sistema:*
‚Ä¢ OS: {platform.system()} {platform.release()}
‚Ä¢ Python: {platform.python_version()}
‚Ä¢ Boot: {boot_time.strftime('%Y-%m-%d %H:%M:%S')}
‚Ä¢ Uptime: {uptime}
"""
        
        await update.message.reply_text(
            status,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao obter status: {e}")

async def processos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Lista os processos do sistema"""
    if not verificar_autorizacao(update.effective_user.id):
        await update.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
        
    try:
        processos = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
            try:
                pinfo = proc.info
                processos.append((
                    pinfo['cpu_percent'],
                    pinfo['memory_percent'],
                    pinfo['pid'],
                    pinfo['name']
                ))
            except:
                pass
                
        # Ordenar por CPU
        processos.sort(reverse=True)
        
        # Pegar top 10
        resposta = "üìã *Top 10 Processos:*\n\n"
        for cpu, mem, pid, name in processos[:10]:
            resposta += f"‚Ä¢ {name} (PID: {pid})\n"
            resposta += f"  CPU: {cpu:.1f}% | RAM: {mem:.1f}%\n\n"
            
        await update.message.reply_text(
            resposta,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao listar processos: {e}")

async def memoria_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra uso detalhado de mem√≥ria"""
    if not verificar_autorizacao(update.effective_user.id):
        await update.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
        
    try:
        mem = psutil.virtual_memory()
        swap = psutil.swap_memory()
        
        resposta = f"""
üíæ *Uso de Mem√≥ria*

*RAM:*
‚Ä¢ Total: {mem.total / (1024**3):.1f} GB
‚Ä¢ Dispon√≠vel: {mem.available / (1024**3):.1f} GB
‚Ä¢ Usada: {mem.used / (1024**3):.1f} GB
‚Ä¢ Livre: {mem.free / (1024**3):.1f} GB
‚Ä¢ Buffers: {mem.buffers / (1024**3):.1f} GB
‚Ä¢ Cache: {mem.cached / (1024**3):.1f} GB
‚Ä¢ Uso: {mem.percent}%

*Swap:*
‚Ä¢ Total: {swap.total / (1024**3):.1f} GB
‚Ä¢ Usada: {swap.used / (1024**3):.1f} GB
‚Ä¢ Livre: {swap.free / (1024**3):.1f} GB
‚Ä¢ Uso: {swap.percent}%
"""
        
        await update.message.reply_text(
            resposta,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao obter informa√ß√µes de mem√≥ria: {e}")

async def disco_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra uso detalhado do disco"""
    if not verificar_autorizacao(update.effective_user.id):
        await update.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
        
    try:
        resposta = "üíΩ *Uso de Disco*\n\n"
        
        for particao in psutil.disk_partitions():
            try:
                uso = psutil.disk_usage(particao.mountpoint)
                resposta += f"*{particao.mountpoint}:*\n"
                resposta += f"‚Ä¢ Device: {particao.device}\n"
                resposta += f"‚Ä¢ Total: {uso.total / (1024**3):.1f} GB\n"
                resposta += f"‚Ä¢ Usado: {uso.used / (1024**3):.1f} GB\n"
                resposta += f"‚Ä¢ Livre: {uso.free / (1024**3):.1f} GB\n"
                resposta += f"‚Ä¢ Uso: {uso.percent}%\n"
                resposta += f"‚Ä¢ Tipo: {particao.fstype}\n\n"
            except:
                pass
                
        await update.message.reply_text(
            resposta,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao obter informa√ß√µes de disco: {e}")

async def rede_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra informa√ß√µes de rede"""
    if not verificar_autorizacao(update.effective_user.id):
        await update.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
        
    try:
        # Interfaces
        interfaces = psutil.net_if_addrs()
        stats = psutil.net_if_stats()
        io = psutil.net_io_counters(pernic=True)
        
        resposta = "üåê *Informa√ß√µes de Rede*\n\n"
        
        for interface, addrs in interfaces.items():
            if interface in stats:
                stat = stats[interface]
                resposta += f"*{interface}:*\n"
                
                # Endere√ßos
                for addr in addrs:
                    familia = {
                        psutil.AF_INET: "IPv4",
                        psutil.AF_INET6: "IPv6",
                        psutil.AF_PACKET: "MAC"
                    }.get(addr.family, addr.family)
                    
                    resposta += f"‚Ä¢ {familia}: {addr.address}\n"
                
                # Status
                resposta += f"‚Ä¢ Ativo: {'‚úÖ' if stat.isup else '‚ùå'}\n"
                resposta += f"‚Ä¢ MTU: {stat.mtu}\n"
                
                # I/O
                if interface in io:
                    net_io = io[interface]
                    resposta += f"‚Ä¢ Download: {net_io.bytes_recv / (1024**2):.1f} MB\n"
                    resposta += f"‚Ä¢ Upload: {net_io.bytes_sent / (1024**2):.1f} MB\n"
                    
                resposta += "\n"
                
        await update.message.reply_text(
            resposta,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao obter informa√ß√µes de rede: {e}")

async def ajuda_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra mensagem de ajuda"""
    if not verificar_autorizacao(update.effective_user.id):
        await update.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
        
    ajuda = """
‚ùì *Ajuda do BOT-T-Terminal*

*Comandos Dispon√≠veis:*

üìå *B√°sicos:*
‚Ä¢ /start - Menu principal
‚Ä¢ /ajuda - Mostra esta mensagem
‚Ä¢ /status - Status detalhado

üõ†Ô∏è *Sistema:*
‚Ä¢ /cmd <comando> - Executa comando
‚Ä¢ /processos - Lista processos
‚Ä¢ /memoria - Uso de mem√≥ria
‚Ä¢ /disco - Uso do disco
‚Ä¢ /rede - Info de rede

‚ö†Ô∏è *Observa√ß√µes:*
‚Ä¢ Todos os comandos s√£o executados como root
‚Ä¢ Comandos t√™m timeout de 30 segundos
‚Ä¢ Use com responsabilidade!

*Exemplos:*
‚Ä¢ Ver arquivos: `/cmd ls -la`
‚Ä¢ Processos: `/cmd ps aux`
‚Ä¢ Mem√≥ria: `/cmd free -h`
‚Ä¢ Rede: `/cmd netstat -tuln`
‚Ä¢ Sistema: `/cmd uname -a`

*Seguran√ßa:*
‚Ä¢ Apenas usu√°rios autorizados t√™m acesso
‚Ä¢ {TENTATIVAS_MAXIMAS} tentativas = bloqueio
‚Ä¢ Somente o dono pode desbloquear
"""
    
    await update.message.reply_text(
        ajuda,
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa bot√µes inline"""
    query = update.callback_query
    await query.answer()
    
    if not verificar_autorizacao(query.from_user.id):
        await query.message.reply_text("‚ùå Voc√™ n√£o est√° autorizado!")
        return
        
    comando = query.data
    
    if comando == "status":
        await status_handler(update, context)
    elif comando == "processos":
        await processos_handler(update, context)
    elif comando == "memoria":
        await memoria_handler(update, context)
    elif comando == "disco":
        await disco_handler(update, context)
    elif comando == "rede":
        await rede_handler(update, context)
    elif comando == "ajuda":
        await ajuda_handler(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Trata erros do bot"""
    print(f"Erro: {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                f"‚ùå Ocorreu um erro: {context.error}"
            )
    except:
        pass

def main():
    """Fun√ß√£o principal"""
    try:
        # Criar aplica√ß√£o
        app = Application.builder().token(TOKEN).build()
        
        # Adicionar handlers
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("cmd", cmd_handler))
        app.add_handler(CommandHandler("status", status_handler))
        app.add_handler(CommandHandler("processos", processos_handler))
        app.add_handler(CommandHandler("memoria", memoria_handler))
        app.add_handler(CommandHandler("disco", disco_handler))
        app.add_handler(CommandHandler("rede", rede_handler))
        app.add_handler(CommandHandler("ajuda", ajuda_handler))
        
        # Handler para bot√µes
        app.add_handler(CallbackQueryHandler(button_handler))
        
        # Handler de erros
        app.add_error_handler(error_handler)
        
        # Iniciar bot
        print("ü§ñ BOT-T-Terminal iniciado!")
        app.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        exit(1)

if __name__ == "__main__":
    main() 